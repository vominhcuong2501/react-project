// stylelint-disable

@mixin media-breakpoint-up($name, $breakpoints: $bs-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Responsive breakpoint down (PC -> SP)
// ======================================================
// Example:
//
// .block {
//   background-color: green;
//
//   @include breakpoint-down(desktop) {
//     background-color: red;
//   }
// }
$breakpoints: (
  'xlargedesktop': (
    max-width: 1919.98px,
  ),
  'largedesktop': (
    max-width: 1535.98px,
  ),
  'mediumdesktop': (
    max-width: 1439.98px,
  ),
  'laptop': (
    max-width: 1367px,
  ),
  'small-laptop': (
    max-width: 1360px,
  ),
  'desktop': (
    max-width: 1199.98px,
  ),
  'smalldesktop': (
    max-width: 1023.98px,
  ),
  'tablet': (
    max-width: 991.98px,
  ),
  'phone': (
    max-width: 767.98px,
  ),
  'smallphone': (
    max-width: 575.98px,
  ),
  'mediumphone': (
    max-width: 413.98px,
  ),
  'xsmallphone': (
    max-width: 374.98px,
  ),
);

@mixin breakpoint-down($breakpoint) {
  $raw-query: map-get($breakpoints, $breakpoint);

  @if $raw-query {
    $query: if(type-of($raw-query) == 'string', unquote($raw-query), inspect($raw-query));

    @media #{$query} {
      @content;
    }
  } @else {
    @error 'No value found for `#{$breakpoint}`. ' + 'Please make sure it is defined in `$breakpoints` map.';
  }
}

// Responsive breakpoint up (SP -> PC)
// ======================================================
// Example:
//
// .block {
//   background-color: green;
//
//   @include breakpoint-up(desktop) {
//     background-color: red;
//   }
// }
$breakpoints-up: (
  'xlargedesktop': (
    min-width: 1920px,
  ),
  'largedesktop': (
    min-width: 1536px,
  ),
  'mediumdesktop': (
    min-width: 1440px,
  ),
  'laptop': (
    min-width: 1366px,
  ),
  'small-laptop': (
    min-width: 1360px,
  ),
  'desktop': (
    min-width: 1200px,
  ),
  'smalldesktop': (
    min-width: 1024px,
  ),
  'tablet': (
    min-width: 992px,
  ),
  'phone': (
    min-width: 768px,
  ),
  'smallphone': (
    min-width: 576px,
  ),
  'xsmallphone': (
    min-width: 375px,
  ),
);

@mixin breakpoint-up($breakpoint) {
  $raw-query: map-get($breakpoints-up, $breakpoint);

  @if $raw-query {
    $query: if(type-of($raw-query) == 'string', unquote($raw-query), inspect($raw-query));

    @media #{$query} {
      @content;
    }
  } @else {
    @error 'No value found for `#{$breakpoint}`. ' + 'Please make sure it is defined in `$breakpoints` map.';
  }
}

// Position
// ======================================================
// Example:
//
// .class {
//   @include position(absolute, 10px, 10px, 10px, 10px);
// }
@mixin position($position: null, $top: null, $right: null, $bottom: null, $left: null) {
  bottom: $bottom;
  left: $left;
  position: $position;
  right: $right;
  top: $top;
}

// Width !== Height
// ======================================================
// Example:
//
// .class {
//   @include size(10px, 20px);
// }
@mixin size($width, $height) {
  height: $height;
  width: $width;
}

// Width === Height
// ======================================================
// Example:
//
// .class {
//   @include square(10px);
// }
@mixin square($size) {
  @include size($size, $size);
}

// Width === Height + Border Radius
// ======================================================
// Example:
//
// .class {
//   @include circle(10px);
// }
@mixin circle($size) {
  @include size($size, $size);
  border-radius: 50%;
}

// Reset UL OL
// ======================================================
// Example:
//
// .class {
//   @include list-unstyled;
// }
@mixin list-unstyled {
  list-style: none;
  margin: 0;
  padding: 0;
}

// Truncate oneline
// ======================================================
// Already supported in Bootstrap 4 mixin: @include text-truncate()
// Example:
//
// .class {
//   @include truncate-oneline;
// }
@mixin truncate-oneline {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Truncate multiline with CSS3
// ======================================================
// Example:
//
// .class {
//   @include truncate-multiline-new(3);
// }
@mixin truncate-multiline-new($line-number) {
  -webkit-box-orient: vertical;
  display: -webkit-box;
  -webkit-line-clamp: $line-number;
  overflow: hidden;
  text-overflow: ellipsis;
}

// Truncate multiline with CSS2
// Example:
//
// .class {
//   @include truncate-multiline-old($line-number: 2);
// }
@mixin truncate-multiline-old($line-height: 1.2em, $line-number: 1, $bg-color: $white) {
  line-height: $line-height;
  margin-right: -1em;
  max-height: $line-height * $line-number;
  overflow: hidden;
  padding-right: 1em;
  position: relative;
  text-align: justify;

  &:before {
    bottom: 0;
    content: '...';
    position: absolute;
    right: 0;
  }

  &:after {
    background: $bg-color;
    content: '';
    height: 1em;
    margin-top: 0.2em;
    position: absolute;
    right: 0;
    width: 1em;
  }
}

// Set icon for Pseudo-element
// Example:
//
// .class {
//   @include pseudo-icon('\f069', 'Font Awesome 5 Free', 900)
// }
@mixin pseudo-icon($content, $fontFamily, $fontWeight: 400) {
  content: $content;
  display: inline-block;
  font-family: $fontFamily;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-style: normal;
  font-variant: normal;
  font-weight: $fontWeight;
  line-height: 1;
  text-rendering: auto;
}

// Position Toolkit
@mixin abs-center-ver {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
}

@mixin abs-center-hoz {
  left: 50%;
  position: absolute;
  transform: translateX(-50%);
}

@mixin abs-center {
  left: 50%;
  position: absolute;
  top: 50%;
  transform: translate(-50%, -50%);
}

// Flexbox Toolkit
@mixin flex-column {
  display: flex;
  flex-direction: column;
}

@mixin flex-center-ver {
  align-items: center;
  display: flex;
}

@mixin flex-center-hoz {
  display: flex;
  justify-content: center;
}

@mixin flex-center {
  @include flex-center-ver;
  justify-content: center;
}

@mixin flex-center-column {
  @include flex-center;
  flex-direction: column;
}

// Flexbox Inline Toolkit
@mixin flex-inline-column {
  display: inline-flex;
  flex-direction: column;
}

@mixin flex-inline-center-ver {
  align-items: center;
  display: inline-flex;
}

@mixin flex-inline-center-hoz {
  display: inline-flex;
  justify-content: center;
}

@mixin flex-inline-center {
  @include flex-inline-center-ver;
  justify-content: center;
}

@mixin flex-inline-center-column {
  @include flex-inline-center;
  flex-direction: column;
}

// Triangle with four optional directions with CSS
@mixin triangle($direction: down, $size: 5px, $color: $black) {
  @include square(0);

  @if ($direction == left) {
    border-bottom: $size solid transparent;
    border-right: $size solid $color;
    border-top: $size solid transparent;
  } @else if ($direction == right) {
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
    border-top: $size solid transparent;
  } @else if ($direction == down) {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;
  } @else {
    border-bottom: $size solid $color;
    border-left: $size solid transparent;
    border-right: $size solid transparent;
  }
}

@mixin clearfix {
  &:before,
  &:after {
    content: '';
    display: table;
  }

  &:after {
    clear: both;
  }
}

@mixin text-break {
  overflow-wrap: break-word;
  word-break: break-word;
}

@mixin hidden {
  opacity: 0;
  pointer-events: none;
  visibility: hidden;
}

@mixin visible {
  opacity: 1;
  pointer-events: auto;
  visibility: visible;
}

@mixin full-viewport($position: fixed) {
  @include position($position, 0, 0, 0, 0);
  @include square(100%);
}

@mixin body-sp-style {
  .nft-body {
    background: $bg-gradient-body;

    @include breakpoint-down(phone) {
      background: $gray-4;
      min-height: $min-height-body;
    }
  }
}

// Limit text
@mixin limit-text($argument) {
  display: -webkit-box;
  -webkit-line-clamp: $argument;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
}

@mixin current-bg {
  background: linear-gradient(225deg, #ff6a00 0%, #ee0979 100%);
}

@mixin current-text {
  color: $black-1;
}

@mixin text-color {
  background: linear-gradient(225deg, #ff6a00 0%, #ee0979 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  text-fill-color: transparent;
  line-height: 120%;
}

@mixin custom-btn {
  display: block;
  border-radius: 8px;
  font-size: 16px;
  border: solid 1px transparent;
  background-image: linear-gradient(225deg, #ff6a00 0%, #ee0979 100%),
    linear-gradient(225deg, #ff6a00 0%, #ee0979 100%);
  background-origin: border-box;
  background-clip: content-box, border-box;
  box-shadow: 2px 1000px 1px #fff inset;
  padding: 24px 16px;

  &:hover {
    background-image: unset;
    background-origin: unset;
    color: white;
    background-clip: unset;
    box-shadow: unset;
    padding: 24px 16px;
    background: linear-gradient(225deg, #ff6a00 0%, #ee0979 100%);
  }
}
